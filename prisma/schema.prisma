generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  BLOCKED
  PRO
}

enum MoneyStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id          String        @id @default(uuid()) @map("_id")
  email       String        @unique
  name        String
  number      String        @unique
  password    String
  totalMoney  Int           @default(0)
  role        UserRole      @default(USER)
  createdAt   DateTime      @default(now()) @map("created_at")
  money       Money[]
  Order       Order[]
  Product     Product[]
  News        News[]
  ProUser     ProUser[]
  Feedback    Feedback[]
  BankDetails BankDetails[]
}

model BankDetails {
  id             String   @id @default(uuid()) @map("_id")
  public_id      String   @unique
  secure_url     String
  upiid          String
  upinumber      String
  accountDetails String
  role           UserRole @default(ADMIN)
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now()) @map("created_at")
}

model ProUser {
  id           String  @id @default(uuid()) @map("_id")
  amount_limit Int
  amount       Int
  minProduct   Int
  maxProduct   Int
  isRecharged  Boolean @default(false)
  User         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Money {
  id            String      @id @default(uuid()) @map("_id")
  name          String
  amount        String?
  upiid         String
  accountNumber String?
  transactionId String      @unique
  public_id     String      @unique
  secure_url    String
  reason        String?
  status        MoneyStatus @default(PENDING)
  isProRecharge Boolean     @default(false)
  User          User?       @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now()) @map("created_at")
}

model Product {
  id          String   @id @default(uuid()) @map("_id")
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  productName String   @unique
  price       Int
  minProduct  Int
  maxProduct  Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt
  orderId     String?
}

model Order {
  id        String      @id @default(uuid()) @map("_id")
  orderId   String      @unique
  userId    String
  user      User?       @relation(fields: [userId], references: [id])
  products  Json
  files     Json?
  amount    Int
  reason    String?
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt
}

model Feedback {
  id          String   @id @default(uuid()) @map("_id")
  orderId     String
  feedback    String
  reply       String?
  replyStatus Boolean  @default(false)
  userId      String?
  User        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt
}

model News {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

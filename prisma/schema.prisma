generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum MoneyStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id        String   @id @default(uuid()) @map("_id")
  email     String   @unique
  name      String?
  number    String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  money     Money[]
  Order     Order[]
}

model Money {
  id            String      @id @default(uuid()) @map("_id")
  name          String
  amount        String?
  upiid         String
  accountNumber String?
  transactionId String      @unique
  public_id     String      @unique
  secure_url    String
  reason        String?
  status        MoneyStatus @default(PENDING)
  User          User?       @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now()) @map("created_at")
}

model Product {
  id          String     @id @default(uuid()) @map("_id")
  productName String     @unique
  price       Int
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt
  orderId     String?
  feeback     Feedback[]
}

model Order {
  id        String      @id @default(uuid()) @map("_id")
  orderId   String      @unique
  userId    String
  user      User?       @relation(fields: [userId], references: [id])
  products  Json
  amount    Int
  reason    String?
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt
}

model Feedback {
  id        String   @id @default(uuid()) @map("_id")
  orderId   String
  feedback   String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
}
